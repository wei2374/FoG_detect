function [Dthreshold,thresholds,mask,parameters,dtth,TG] = self_adaptive(data1,data2,pos,stepsize,windowsize,sensors,Features,Thresholds,Thresholds_parameters,lda_features,classifier,patient)
%% This function is used to extract useful information from training data
% PART1: extract necessary thresholds
% PART2: LDA

data = data1;

%% get the training window

pos_all = 1000*[pos(1,1),pos(1,2)];
pos_walk = [round(pos(2,1)):round(pos(2,2))];
pos_stop = [round(pos(3,1)):round(pos(3,2))];

index1 =  (data(:,1)>pos_all(1));
index2 =  (data(:,1)<pos_all(2));
index3 =  index1&index2;

Train_data = data(index3,:);

%% Plot original data
figure(1)
subplot(3,1,1)
plot(1:1:length(Train_data),Train_data(:,3));

% plot normal gait
x1 = pos_walk(1);
x2 = pos_walk(end);
y1 = -3000;
y2 = -3500;
patch([x1,x2,x2,x1],[y1 y1 y2 y2],[0 .75 0.75]);


% plot stop gait
x1 = pos_stop(1);
x2 = pos_stop(end);
y1 = -3000;
y2 = -3500;
patch([x1,x2,x2,x1],[y1 y1 y2 y2],[1 0 1]);
ylabel('Acc [mg]');
xlabel('Time [ms]')

title('original data used for self-adaptive ')

% assign window
pos_walk = [round(pos(2,1)/stepsize):round(pos(2,2)/stepsize)];
pos_stop = [round(pos(3,1)/stepsize):round(pos(3,2)/stepsize)];
train=1;

%% Get variables for feature extraction
for sensor=1:sensors
    
    %% Get depth thresholds
    Features1 = [0,9,10];
    [result_features1(sensor),Dthreshold(sensor)] = get_features(Features1,Train_data,windowsize,stepsize,sensor+1,pos_walk,train);
    
    %% combile pre-filter with post-filter
    thresholds_all = [Thresholds];
    thresholds_params = [Thresholds_parameters];
    
    %% Calculate Threshold
    result_mean(sensor) = calculate_threshold(thresholds_all,thresholds_params,result_features1(sensor),pos_walk,pos_stop);
end


%% Feature extraction
datas = [data1;data2];

for sensor=1:sensors
    
    %% Feature extraction
    [result_features(sensor),x] = get_features(Features,datas,windowsize,stepsize,sensor+1,pos_walk,Dthreshold(sensor));

    %% Threshold Selection
     
        [result2(sensor,:),labels] = threshold_selection(Thresholds,result_mean(sensor), result_features(sensor),sensor+1,0);
     if(sensor==2)
          result(sensor,:) = result2(sensor,:);
     else
         result(sensor,:) = ones(1,length(labels));
     end
    
end
%% plot original label
figure(4)
subplot(4,1,1)
plot(labels)
title('labels')

%% Only apply pre-filter power

%{
counter=1;

%% a preview

labels2 = labels;
for sensor = 2:2
    for i=1:length(labels2)
      if(result(sensor,i)==0)    
        if(labels2(i)==2)
            labels2(i)=1;
            counter=counter+1;
               
        else if(labels2(i)==1)
                labels2(i)=0;
        end
        
      end
    end   
end
%}
%%

pre_filter = result(2,:);
filter_0 = (labels~=0);
pre_filter2 = pre_filter&
subplot(4,1,2)
%plot(labels2)
%title('results after applied pre thresholds')

%% Feature selection
mask = feature_selection(result_features,Features,pre_filter2,sensors,patient);
%mask = ones(length(Features),sensors);


%index_f = (datas(:,11)~=0);
%data_f = datas(index_f,:);

%% Fi LDA
[W,TG,DT_threshold,tree] = fi_lda(datas,Thresholds,result_mean,Features,lda_features,result_features,labels,pre_filter,sensors,classifier,mask);


%% Filtering out labeled data
training_Y = labels-1;
% filter out experiments data
filter_0 = (training_Y~=-1);
% filter out data within pre filter
filter_0 = filter_0 & filter;

Index = find(filter_0==1);

training_y = training_Y(Index);

%% calculate training set

[lda_result] = apply_lda(W,result_features,Features,sensors);
%lda_result = lda_result(Index);

%% new
if(classifier<4)  
if(TG==1)
    new_result = lda_result>DT_threshold;
end
if(TG==0)
    new_result = lda_result<DT_threshold;
end
        
%% plot training set
figure(4)
subplot(4,1,3)
plot(new_result);
title('after lda result')


%% post filter
%{
for sensor=1:sensors
    %% Threshold Selection
    [result(sensor,:),labels] = threshold_selection(post_threshold,result_mean(sensor), result_features(sensor),sensor+1,0);   
end

for sensor = 1:sensors
    filter = filter&result(sensor,:);    
end
%}

%% plot final

filter = new_result & filter;
figure(4)
subplot(4,1,4)
plot(filter);
title('final result')


%% old
else

    Z_train = [lda_result;training_y]';
    tree.plot_errors(Z_train);
end
%% return value
parameters = W;
dtth = DT_threshold;
TG = TG;
thresholds = result_mean;
    
   
end